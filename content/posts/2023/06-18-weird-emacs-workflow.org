#+title: 混乱中立与 Emacs
#+date: 2023-06-18T14:46:01+08:00

#+caption: Meow! [[https://pixabay.com/photos/cat-paw-keyboard-playful-nasty-3695040][Lemonsandtea]]
[[https://cdn.pixabay.com/photo/2018/09/22/11/21/cat-3695040_1280.jpg]]

* Why Emacs

人类关于 Emacs、Vim 甚至是 VSCode 的争议从未休止，毕竟工具往往跟效率关系密切。对我而言，起初只是想试一试传闻中的 Emacs，看它到底有几分威力，在折腾过如[[https://github.com/redguardtoo/emacs.d][陈斌]]大佬、[[https://github.com/doomemacs/doomemacs][Doom Emacs]] 等等配置之后，逐渐开始有点“上头”，开始将日常工作流都迁移到 Emacs 上去。

对我来说，Emacs 有这么几个有意思的点：

1. 几乎所有的 buffer、函数、变量等等都是共享的，这让 hack 变得轻松
2. Emacs Lisp 有着很不错的表达能力，配合各种文本函数，很轻易地可以写出自己想要的功能
3. 为了让你能更舒服的 hacking，甚至提供了如 ~advice-add~ 这样的 hijack 功能

在我看来，Emacs 几乎就是为了让你折腾它而诞生的，打开 Emacs 总会不自觉地开启 ~.emacs.d~ 文件夹（笑），毕竟，当你用的不爽的时候，Emacs 真的允许你去修改。

当然，过度的灵活性也是 Emacs 的最大缺点－它违背了 UNIX 哲学：

#+begin_quote
Make each program do one thing well. To do a new job, build afresh rather than complicate old programs by adding new "features".
#+end_quote

Emacs 作为文本编辑器是不够“纯粹”的，但我个人认为，模块化设计跟效率有着天然的冲突，选择 Emacs 就需要接收模块化不够的问题。就像大家偏好使用 IDE 一样，效率的来源往往就是多个小模块的拼合。

* help-with-tutorial

实际上 Emacs 你只需要掌握 ~M-x~ 这么一个快捷键就可以了（认真脸），几乎所有的快捷键都是在执行某个 ~(interactive)~ 命令。比如 ~C-n~ 就是 ~next-line~ ，~C-s~ 就是 ~isearch-forward~ ，如此。

我自己对 Vim 实际上不是很熟，连 ~ciw~ 这种这么好用的命令我都是学 Emacs 的时候发现的，因此选择了走一遍 ~help-with-tutorial~ ；如果你比较熟悉 Vim 的话可以直接使用 Doom Emacs 配置来快速入门。

当然，还有必不可少的 Emacs Lisp，这个语言可能对习惯类 C 语言的人来说会很不适应，我感觉是跟函数式类的语言更为接近（虽然多数时候都是按过程式的思维在写 hhhh）。比如：

1. 没有 ~return~ 这样的东东，函数的返回值就是最后 eval 的表达式的值
2. 最基础的数组和 dict 之类的数据结构表达偏向函数式（例如 ~car/cdr~ 这样的函数）
3. 括号太多（雾）
4. Many, many more

我的做法是照葫芦画瓢，因为我自身学过一定的 Haskell 这类函数式语言，上手起来没有太多问题。如果觉得 hack 起来有点困难的话，可以参考 [[https://www.gnu.org/software/emacs/manual/html_node/elisp/index.html][Emacs Lisp 手册]]来学习一下，或者别忘了还有 ChatGPT 可以利用。

P.S. 可能 Emacs 的 Common Lisp 扩展会让敲代码的体验好一些，无责任推荐（。

* Prelude -> Postlude

在尝试了很多配置之后，都感觉不是很“贴合”自己，尤其是大家似乎都很喜欢 Evil，但我自己更偏爱原生的键位，因为它泛用性比较强，在 ~bash/zsh~ 这类终端下默认就可以使用。因此敲定了 [[https://github.com/hartlottery/postlude][Prelude]] 作为框架，在此基础上修改。

我自己的一些“所谓的”哲学理念（可能有点 bullsht）：

** Modalka

为了小拇指的健康，避免因 Control 键按太多而承受不住（雾），一个 modal editing 还是相当有必要的。所谓 modal editing，其实就是给“编辑”这个操作分模式，像 Vim 有 Normal 和 Insert。

选择 [[https://github.com/mrkkrp/modalka][Modalka]] 的原因也很简单，因为它侵入性没有像 Evil 或者 god-mode 那样强，留有了更多的自定义空间。基本仿照着作者本人的配置，映射的基本是 Emacs 的原生键位，但是将常用的 ~x~ 和 ~c~ 键映射为了像 god-mode 那样的 ~C-x~ 前缀调用。

因为我自己 LWin 键用的并不多，所以直接将它映射为 ~<menu>~ 键并用来切换 modalka-mode，同时映射 ~<insert>~ 作为 fallback 按键，这样就能通过左手手掌按压来快速切换了。

P.S. 不过其实发现自己好像 modal 模式用的不是很频繁，Control 键按的依然“欢快”。可能确实习惯了统一快捷键的方式（？），不过为了小拇指，还是多切切习惯习惯好了。

** Workspace

工作区则相当接近 i3 这样的配置，不过因为主力系统是 Windows（不要问为什么，我也很想换，但是万恶阿里郎），因此没办法利用 Win 键切换，所以还是用的快件键切换。

使用了 Emacs 默认的 ~tab-bar-mode~ 来管理工作区，通过 ~C-m 1~ 这样的快捷键切换。而窗口则使用 ~winum~ 插件配合 ~M-1~ 这样的快捷键快速切换。

这么选择主要是感觉日常中切换工作区的频率，相对与切换窗口来说要少一点（虽说如此，我还是很想像 i3 那样的全都要）。

** Region

日常改代码的时候，最重要的其实就是 region 的操控，如 Vim 经常被使用的 ~cw~ 命令。因此选定了使用 [[https://github.com/magnars/expand-region.el][expand-region.el]] 来快速选择区域，这部分借鉴了 [[https://github.com/meow-edit/meow][Meow]] 的设计哲学，先选定区域，再决定动作。当然也从 Meow 那“抄”来了 ~meow-inner-of-thing~ 作为备选。

#+begin_quote
Vim 的逻辑是，我想进行一个替换的操作，作用在一个单词上；

Meow 的逻辑则是，我选定了一个单词，对它进行替换的操作；

这两种逻辑没有对错，只有针对自己而言是否习惯，我就更偏向于 Meow 的逻辑。
#+end_quote

当然也缝合了 [[https://github.com/oantolin/embark][Embark]] 来进行操作，但是实际上目前用的并不多，只是搜索符号的时候代替 Vim 的 ~*/#~ 这样的命令。在考虑是否要咔嚓掉 hhhh。

** Jump

大家好像都很喜欢用 [[https://github.com/abo-abo/avy][avy]] 来跳转，经过一些小代码浏览的经验，目前我习惯的跳转方式有：

+ ~C-;~ 跳转到同一行（或者上下两行）的 word 上
+ ~C-'~ 任意单词跳转
+ ~C-u X C-n/p~ 配合相对行号快速跳转（其实目前这个用的更多，可能是目前对“行”的操作更多）
+ ~C-j d/r~ 跳转 + 转到定义或引用，来自 [[https://github.com/MaskRay/Config][MaskRay]] 大佬的配置

除此之外也配置了很多其他的跳转方式，但是感觉都不怎么用的样子，主要是我目前还没有完全想好真正高效的定位方式，是 avy 这样更快，亦或是 Emacs 本身的操作就足够了，还是“组合拳”更为适应？

现在而言，我尽量遵循 *Jump more, move less* 的原则，尽量地使用跳转代替 ~C-f~ 等操作，当然在正常编辑中一些小错误的修正还是离不开 ~C-f~ 等。

** TODO Next

目前比较纠结要不要把 Meow 替换掉 Modalka，因为它的设计思想确实比较对我，但是又感觉实际上我只是喜欢它的选择模式，有了 ~expand-region.el~ 之后似乎也不那么必需了。我也把 Vim 的 ~c~ 键挪到了 Modalka 上，这样操作区域就更简单了。

还有需要酌定的就是所谓的 Ergo，即人体工程学，之前尝试了一下 [[https://github.com/jyp/boon][Boon]] 发现好像没有必要为了省一点的手指挪动距离而放弃养成的习惯。

P.S. 走了一遍 Boon 的 Tutor 才明白，原来手指尽量不移动 + 左右按键分配均衡，就叫做人体工程学键位了。。好吧，我还像试试 Dvorak/Colemark/Workman 的说。

另外 IDE 常用的向前向后跳转还暂时没有去弄，因为像 ~better-jumper~ 这样的插件都需要自己手动 mark 跳跃点才行，想想还是有一定工作量的。依然还在磨合期（。

* Devil

来自 [[http://web.archive.org/web/20180602132306/https://plus.google.com/+LinusTorvalds/posts/iySKQGtkmtb][Linus Torvalds]]：

#+begin_quote
So for the other three people out there using "uEmacs/PK" (not to be confused with real emacs, which is the tool of the devil), you can now get a shiny new version of the same old cruddy editor, but now it actually edits UTF8.
#+end_quote

我尝试编译了一份 [[https://github.com/torvalds/uemacs][torvalds/uemacs]] 玩玩，发现它真的很纯粹（纯粹到按键绑定全都是硬编码在 C 文件里的），而且贯彻着上述“只做一件事”的 UNIX 哲学。也难怪 Linus 会如此评价 Emacs（。

* 混乱中立

配置久了之后就有一点感受是，当能完全自定义自己的 workflow 时，我发现选择突然太多了，自己似乎无法定夺到底哪种才是更好的，导致自己的配置存在各种“混乱”，很多功能相互重叠，甚至是用不上但感觉又能提升效率。

也就是有了一点所谓的 Premature Optimization 的感觉，明明应该是提升效率的，可是最后却被束缚了。思来想去还是觉得，方法是拿来解决问题的，还是回归我遇到的问题本身，再进行客制化吧。

可能是 Emacs 天然独有的混乱中立，它可以是为你提升效率的善良天使，也可以是给你捣乱让你反而被束缚住的邪恶魔鬼。

给自己的谨记： *工具始终是拿来解决问题，而非折磨自己的* 。

/May the Emacs be with you./
